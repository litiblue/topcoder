using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

class CircuitsConstruction
{
    static void Main(string[] args)
    {
        string circuit = args[0];
        string regStr = args[1];

        regStr = regStr.Replace("{", "").Replace("}", "");
        string[] regStrArr = regStr.Split(',');

        int[] conductors = new int[regStrArr.Length];

        for (int i = 0; i < regStrArr.Length; i++)
        {
            conductors[i] = Int32.Parse(regStrArr[i]);
        }

        Console.Write(maximizeResistance(circuit, conductors).ToString());
    }

    public static int maximizeResistance(string circuit, int[] conductors)
    {
        int[] conductorsRange = new int[conductors.Length];

        for (int i = 0; i < conductors.Length; i++)
        {
            int max = 0, maxIndex = -1;
            for (int j = 0; j < conductors.Length; j++)
            {
                if (conductors[j] > max)
                {
                    max = conductors[j];
                    maxIndex = j;
                }
            }
            conductors[maxIndex] = 0;
            conductorsRange[i] = max;
        }

        int sum = 0, aliveConducts = removeConductsCount(circuit);
        for (int i = 0; i < aliveConducts; i++)
        {
            sum += conductorsRange[i];
        }

        return sum;
    }

    public static int maxRet(int num1, int num2)
    {
        if (num1 > num2)
            return num1;
        else
            return num2;
    }

    public static int removeConductsCount(string circuit)
    {
        char[] arrCircuit = circuit.ToCharArray();
        int connectionCnt = 0, conductorsCnt = 0;
        int aliveCnt1 = 0, aliveCnt2 = 0;

        if (!circuit.Substring(1).Equals("XX") && !circuit.Equals("X"))
        {
            for (int i = 1; i < circuit.Length; i++)
            {
                if (arrCircuit[i] == 'A' || arrCircuit[i] == 'B')
                    connectionCnt++;
                else
                    conductorsCnt++;
                if (connectionCnt + 1 == conductorsCnt)
                {
                    aliveCnt1 = removeConductsCount(circuit.Substring(1, i));
                    aliveCnt2 = removeConductsCount(circuit.Substring(i + 1));

                    if (arrCircuit[0] == 'A')
                        return aliveCnt1 + aliveCnt2;
                    else
                        return maxRet(aliveCnt1, aliveCnt2);
                }
            }
        }
        else if (arrCircuit[0] == 'A')
        {
            aliveCnt1 = 2;
        }
        else if (arrCircuit[0] == 'B')
        {
            aliveCnt1 = 1;
        }
        else
        {
            aliveCnt1 = 1;
        }

        return aliveCnt1;
    }
}
